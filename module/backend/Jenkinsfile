podTemplate(label: 'mypod', containers: [
    containerTemplate(name: 'terraform',image: 'hashicorp/terraform:latest', ttyEnabled: true, command: 'cat')
  ],
  volumes: [
    hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
  ]
  ) {
    node('mypod') {
        properties([
            parameters([
                string(description: 'AMI to be deplpoyed', name: 'ami_id', trim: true)
            ])
        ])
        if ( params.ami_id == '' ) {
             currentBuild.result = 'ABORTED'
             error("Ami_id parameter is mandatory")
        }
        def AMI_ID = "${params.ami_id}"
        stage('Get latest version of code') {
                script{
                   def scmVar =  checkout([
                        $class: 'GitSCM', branches: scm.branches,
                        extensions: scm.extensions + [[$class: 'CleanBeforeCheckout', deleteUntrackedNestedRepositories: true]],
                        userRemoteConfigs: scm.userRemoteConfigs])
                }
        }
      stage('Terraform init') {
        container('terraform') {
       withCredentials([usernamePassword(credentialsId: 'aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]){
            script {
            dir('module/backend'){
             sh "pwd"
             sh "ls -la"
             sh "terraform init"
            }
          }
        }
      }
    }
      stage('Terraform plan') {
        container('terraform') {
        withCredentials([usernamePassword(credentialsId: 'aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID'),
          usernamePassword(credentialsId: 'DB_PASSWORD_CRED_ID', usernameVariable: 'db_username', passwordVariable: 'db_password')  
        ]){
          script {
            dir('module/backend'){
                sh "terraform plan -var 'db_password=$db_password' -var 'db_user=$db_username' -var 'be_ami=$AMI_ID' -out plan.json"
              }
            }
          }
        }
      }
      stage('Terraform Apply') {
        container('terraform') {
        withCredentials([usernamePassword(credentialsId: 'aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]){
          script {
            dir('module/backend'){
                sh "terraform apply plan.json"
              }
            }
          }
        }
      }
    }
  }